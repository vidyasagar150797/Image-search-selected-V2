{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000',\n  timeout: 60000,\n  // 60 seconds timeout\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`Making ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} request to: ${config.url}`);\n  return config;\n}, error => {\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor\napi.interceptors.response.use(response => {\n  console.log(`Response received from: ${response.config.url}`);\n  return response;\n}, error => {\n  console.error('Response error:', error);\n  if (error.response) {\n    var _error$response$data, _error$response$data2;\n    // Server responded with an error status\n    const message = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || ((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.message) || `Server error: ${error.response.status}`;\n    throw new Error(message);\n  } else if (error.request) {\n    // Request was made but no response received\n    throw new Error('No response from server. Please check your connection.');\n  } else {\n    // Something else happened\n    throw new Error(error.message || 'An unexpected error occurred');\n  }\n});\n\n/**\r\n * Upload an image and search for similar images\r\n * @param {File} imageFile - The image file to upload\r\n * @param {number} topK - Number of similar images to return (default: 5)\r\n * @returns {Promise<Object>} - Search results\r\n */\nexport const uploadImageAndSearch = async (imageFile, topK = 5) => {\n  const formData = new FormData();\n  formData.append('file', imageFile);\n  const response = await api.post('/upload', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    },\n    params: {\n      top_k: topK\n    }\n  });\n  return response.data;\n};\n\n/**\r\n * Search for images using text query\r\n * @param {string} query - Text query\r\n * @param {number} topK - Number of results to return\r\n * @returns {Promise<Object>} - Search results\r\n */\nexport const searchImages = async (query, topK = 5) => {\n  const response = await api.post('/search', {\n    query,\n    top_k: topK\n  });\n  return response.data;\n};\n\n/**\r\n * Index images from URLs (Admin function)\r\n * @param {string[]} imageUrls - Array of image URLs to index\r\n * @param {number} batchSize - Batch size for processing\r\n * @returns {Promise<Object>} - Indexing response\r\n */\nexport const indexImages = async (imageUrls, batchSize = 10) => {\n  const response = await api.post('/index', {\n    image_urls: imageUrls,\n    batch_size: batchSize\n  });\n  return response.data;\n};\n\n/**\r\n * Get system health status\r\n * @returns {Promise<Object>} - Health status\r\n */\nexport const getHealthStatus = async () => {\n  const response = await api.get('/health');\n  return response.data;\n};\n\n/**\r\n * Get system statistics\r\n * @returns {Promise<Object>} - System stats\r\n */\nexport const getSystemStats = async () => {\n  const response = await api.get('/stats');\n  return response.data;\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","_error$response$data","_error$response$data2","message","data","detail","status","Error","uploadImageAndSearch","imageFile","topK","formData","FormData","append","post","params","top_k","searchImages","query","indexImages","imageUrls","batchSize","image_urls","batch_size","getHealthStatus","get","getSystemStats"],"sources":["C:/Users/Vidyasagar/Documents/PublicisSep/Image-search-selected-V2/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create axios instance with base configuration\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000',\r\n  timeout: 60000, // 60 seconds timeout\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    console.log(`Making ${config.method?.toUpperCase()} request to: ${config.url}`);\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('Request error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log(`Response received from: ${response.config.url}`);\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('Response error:', error);\r\n    \r\n    if (error.response) {\r\n      // Server responded with an error status\r\n      const message = error.response.data?.detail || \r\n                     error.response.data?.message || \r\n                     `Server error: ${error.response.status}`;\r\n      throw new Error(message);\r\n    } else if (error.request) {\r\n      // Request was made but no response received\r\n      throw new Error('No response from server. Please check your connection.');\r\n    } else {\r\n      // Something else happened\r\n      throw new Error(error.message || 'An unexpected error occurred');\r\n    }\r\n  }\r\n);\r\n\r\n/**\r\n * Upload an image and search for similar images\r\n * @param {File} imageFile - The image file to upload\r\n * @param {number} topK - Number of similar images to return (default: 5)\r\n * @returns {Promise<Object>} - Search results\r\n */\r\nexport const uploadImageAndSearch = async (imageFile, topK = 5) => {\r\n  const formData = new FormData();\r\n  formData.append('file', imageFile);\r\n  \r\n  const response = await api.post('/upload', formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data',\r\n    },\r\n    params: {\r\n      top_k: topK,\r\n    },\r\n  });\r\n  \r\n  return response.data;\r\n};\r\n\r\n/**\r\n * Search for images using text query\r\n * @param {string} query - Text query\r\n * @param {number} topK - Number of results to return\r\n * @returns {Promise<Object>} - Search results\r\n */\r\nexport const searchImages = async (query, topK = 5) => {\r\n  const response = await api.post('/search', {\r\n    query,\r\n    top_k: topK,\r\n  });\r\n  \r\n  return response.data;\r\n};\r\n\r\n/**\r\n * Index images from URLs (Admin function)\r\n * @param {string[]} imageUrls - Array of image URLs to index\r\n * @param {number} batchSize - Batch size for processing\r\n * @returns {Promise<Object>} - Indexing response\r\n */\r\nexport const indexImages = async (imageUrls, batchSize = 10) => {\r\n  const response = await api.post('/index', {\r\n    image_urls: imageUrls,\r\n    batch_size: batchSize,\r\n  });\r\n  \r\n  return response.data;\r\n};\r\n\r\n/**\r\n * Get system health status\r\n * @returns {Promise<Object>} - Health status\r\n */\r\nexport const getHealthStatus = async () => {\r\n  const response = await api.get('/health');\r\n  return response.data;\r\n};\r\n\r\n/**\r\n * Get system statistics\r\n * @returns {Promise<Object>} - System stats\r\n */\r\nexport const getSystemStats = async () => {\r\n  const response = await api.get('/stats');\r\n  return response.data;\r\n};\r\n\r\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}